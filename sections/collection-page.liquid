<div id="product-category" class="container layer-category">
  <div class="layered-navigation-block"></div>
  {% render 'breadcrumb' %}
  <div class="row">
    <div class="col-order">
      {% if section.settings.show_collection_sidebar == 'left' %}
        {% include 'collection-sidebar' %}
      {% endif %}
      <div
        id="content"
        class="{% if section.settings.show_collection_sidebar != 'no' %}col-md-9{% else %}col-md-12{% endif %} col-sm-12 col-xs-12"
      >
        {% if section.settings.collection_top != blank %}
          <div class="has-thumb">
            <div class="thumb category-image">
              <img
                src="{{ section.settings.collection_top | image_url: width: 825, height: 220 }}"
                width="825"
                height="220"
                alt="{{ collection.title }}"
                title="{{ collection.title }}"
                class="img-thumbnail"
                loading="lazy"
              >
            </div>
          </div>
        {% endif %}
        {% if section.settings.show_collection_title %}
          <h1 class="category-name">{{ collection.title }}</h1>
        {% endif %}
        {% if section.settings.show_collection_description %}
          {% if collection.description != blank %}
            <div class="category-des">
              <p>{{ collection.description }}</p>
            </div>
          {% endif %}
        {% endif %}
        <div class="custom-category">
          <div id="wraper_ajax" class="loadding_ajaxcart"><i class="fa fa-spinner fa-spin"></i></div>
          {% case template %}
            {% when 'collection.10' %}
              {% assign product_count_per_page = 10 %}
            {% when 'collection.20' %}
              {% assign product_count_per_page = 20 %}
            {% when 'collection.30' %}
              {% assign product_count_per_page = 30 %}
            {% when 'collection.all' %}
              {% assign product_count_per_page = 999 %}
            {% else %}
              {% assign product_count_per_page = section.settings.product_count_per_page %}
          {% endcase %}
          {% paginate collection.products by product_count_per_page %}
            <div
              class="toolbar toolbar-products toolbar-top {% if section.settings.show_top_filters == false %} hide {% endif %}"
              id="toolbar-products"
            >
              <div class="col-12">
                <div class="modes">{% include 'collection-views' %}</div>
                <div class="toolbar-amount">{% include 'collection-amount' %}</div>
                <div class="sorter">{% include 'collection-sorting' %}</div>
                {% comment %} <div class="limiter">{% include 'collection-show-count' %}</div> {% endcomment %}
              </div>
              {% render 'collection-active-filter-tags' %}
            </div>
            <div
              data-next-url="{% if paginate.next %}{{ paginate.next.url }}{% endif %}"
              class="row display-flex quickview-products custom-products"
              id="custom-products"
            >
              {% for product in collection.products %}
                {% if section.settings.show_collection_sidebar != false %}
                  {% include 'product-grid-item-collection' %}
                {% else %}
                  {% include 'product-grid-item-collection' %}
                {% endif %}
              {% else %}
                <div class="grid-item">
                  <p>{{ 'collections.general.no_matches' | t }}</p>
                </div>
              {% endfor %}
            </div>
            {% if section.settings.show_pagination_bar == 'true' %}
              {% render 'pagination', paginate: paginate %}
            {% else %}
              {% render 'pagination_load_more', paginate: paginate %}
            {% endif %}
          {% endpaginate %}
        </div>
      </div>
      {% if section.settings.show_collection_sidebar == 'right' %}
        {% include 'collection-sidebar' %}
      {% endif %}
    </div>
  </div>
</div>
{% schema %}
{
  "name": "Collection",
  "settings": [
    {
      "type": "paragraph",
      "content": "In order to experience the actual layout, it is best to refresh the page while moving between mobile and desktop layout. [Video Tutorial for Setting up Collection page](https://youtu.be/fvWlGrg82Mg?list=PLvJCnPMUAdwr6XxWVo_f9dkVRh8GNCXoa)"
    },
    {
      "type": "image_picker",
      "id": "collection_top",
      "label": "Top image"
    },
    {
      "type": "checkbox",
      "id": "show_collection_title",
      "label": "Show Collection Title",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_collection_description",
      "label": "Show Collection Description",
      "default": true
    },
    {
      "type": "text",
      "id": "product_count_per_page",
      "label": "Number of products to show",
      "default": "12"
    },
    {
      "type": "checkbox",
      "id": "show_top_filters",
      "label": "Show Top Filters",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_active_filter_tags",
      "label": "Show active filter tags",
      "info": "Shows active filter tags on top of the collection page.",
      "default": true
    },
    {
      "type": "select",
      "id": "collection_view_default",
      "label": "Listing View",
      "options": [
        {
          "value": "2",
          "label": "grid 2"
        },
        {
          "value": "3",
          "label": "grid 3"
        },
        {
          "value": "4",
          "label": "grid 4"
        },
        {
          "value": "0",
          "label": "List"
        }
      ],
      "default": "3"
    },
    {
      "type": "checkbox",
      "id": "show_summary",
      "label": "Show Product summary in list view",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_summary_stripped",
      "label": "Strip Summary",
      "default": true,
      "info": "Strips html tags to show text without format"
    },
    {
      "type": "text",
      "id": "product_summary_words",
      "label": "Words count on summary area",
      "default": "30"
    },
    {
      "type": "select",
      "id": "show_collection_sidebar",
      "label": "Sidebar position",
      "options": [
        {
          "value": "no",
          "label": "No Sidebar"
        },
        {
          "value": "left",
          "label": "Left Sidebar"
        },
        {
          "value": "right",
          "label": "Right Sidebar"
        }
      ],
      "default": "left"
    },
    {
      "type": "checkbox",
      "id": "show_color_box",
      "label": "Show Color Box",
      "default": true,
      "info": "Shows color variant as color box rather than text"
    },
    {
      "type": "text",
      "id": "color_box_variant",
      "label": "Color variant Title",
      "default": "color",
      "info": "Name of the color variant on your products. Refresh required to see the correct effect on page."
    },
    {
      "type": "select",
      "id": "show_pagination_bar",
      "label": "Pagination mode",
      "options": [
        {
          "value": "true",
          "label": "Pagination Bar"
        },
        {
          "value": "false",
          "label": "Auto Scroll"
        }
      ],
      "default": "false"
    }
  ],
  "blocks": [
    {
      "type": "categories",
      "name": "Sidebar Categories",
      "settings": [
        {
          "type": "text",
          "id": "category_count",
          "label": "Categories count on sidebar",
          "default": "5"
        }
      ]
    },
    {
      "type": "links",
      "name": "Sidebar links menu",
      "settings": [
        {
          "type": "link_list",
          "id": "collection_sidebar_menu",
          "label": "Sidebar links menu"
        }
      ]
    },
    {
      "type": "vendors",
      "name": "Sidebar Vendors menu",
      "settings": [
        {
          "type": "checkbox",
          "id": "show_vendors_title",
          "label": "Show Title",
          "default": true
        }
      ]
    },
    {
      "type": "filters",
      "name": "Sidebar Filters",
      "settings": []
    },
    {
      "type": "image",
      "name": "Sidebar Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "collection_side_image",
          "label": "Side image"
        },
        {
          "type": "url",
          "id": "collection_side_link",
          "label": "Side image link"
        }
      ]
    },
    {
      "type": "listing",
      "name": "Product Listing",
      "settings": [
        {
          "type": "text",
          "id": "collection_side_listing_title",
          "label": "Heading"
        },
        {
          "type": "collection",
          "id": "collection_side_listing",
          "label": "Collection to Show"
        }
      ]
    },
    {
      "type": "multi_level_filter",
      "name": "Multi Level Filter",
      "settings": [
        {
          "type": "paragraph",
          "content": "The filter block will only work for single filter sections. For multiple filter sections, use the Multi Level Filter section instead."
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Primary Heading",
          "default": "Filter By Year, Make, Model"
        },
        {
          "type": "select",
          "id": "filter_type",
          "label": "Filter Type",
          "default": "default",
          "options": [
            {
              "value": "default",
              "label": "Theme Default"
            },
            {
              "value": "sdapp",
              "label": "Search & Discovery App Filters"
            }
          ],
          "info": "Select the filter type to be used. The default option is for the theme's default filter, while the Search & Discovery App Filters option is for the Search & Discovery app. Note that the app must be installed and configured for this option to work. Also the values should be in the format of the app as it is case insensitive and a search for 'abc' won't yield results if the tag is added as 'Abc'."
        },
        {
          "type": "select",
          "id": "no_of_filters",
          "label": "Number of Filters",
          "default": "3",
          "options": [
            {
              "value": "2",
              "label": "2"
            },
            {
              "value": "3",
              "label": "3"
            },
            {
              "value": "4",
              "label": "4"
            }
          ]
        },
        {
          "type": "select",
          "id": "data_source",
          "label": "Source of Data",
          "default": "file",
          "options": [
            {
              "value": "file",
              "label": "File"
            },
            {
              "value": "menu",
              "label": "Filter Menu"
            }
          ]
        },
        {
          "type": "text",
          "id": "variable_name",
          "label": "Variable Name in the File",
          "default": "makeObject",
          "info": "Specify the variable used for storing data. For multiple filter sections, duplicate the variable, modify the JSON data, and specify the new variable name in the makeObject.js file that can be accessed from [here](?key=assets%2FmakeObject.js). After completion, tag the relevant products with keywords to make them searchable."
        },
        {
          "type": "link_list",
          "id": "menu_handle",
          "label": "Handle of the Menu",
          "info": "Specify the handle for the multi-level menu to be used as a filtering tool. This handle can be found in the menu section of your theme editor."
        },
        {
          "type": "text",
          "id": "filter_1_title",
          "label": "Title of Filter 1",
          "default": "Make"
        },
        {
          "type": "text",
          "id": "filter_2_title",
          "label": "Title of Filter 2",
          "default": "Model"
        },
        {
          "type": "text",
          "id": "filter_3_title",
          "label": "Title of Filter 3",
          "default": "Year"
        },
        {
          "type": "text",
          "id": "filter_4_title",
          "label": "Title of Filter 4",
          "default": "Type"
        }
      ]
    },
    {
      "type": "@app"
    }
  ],
  "presets": []
}
{% endschema %}

{% if section.settings.show_color_box and section.settings.color_box_variant != blank %}
  <style>
      [data-filter-group="{{ section.settings.color_box_variant }}"] {
      float: left;
      width: 100%;
      }
      [data-filter-group="{{ section.settings.color_box_variant }}"] span {
      float: left;
      margin: 6px 6px 6px 7px;
    }
      [data-filter-group="{{ section.settings.color_box_variant }}"] span.bg-white {
      border: 1px solid #ccc;
      }
      [data-filter-group="{{ section.settings.color_box_variant }}"] a.add-filter:before {
      width: 26px !important;
      height: 30px !important;
      line-height: 28px !important;
      top: 0px;
      margin-top: 0px;
      background: inherit !important;
      border-radius: 0px !important;
      border: {{ settings.grid_layout }}px !important;
    }
    [data-filter-group="{{ section.settings.color_box_variant }}"] span a {
      font-size:0 !important;
    }
    [data-filter-group="{{ section.settings.color_box_variant }}"] a:after {
      top: 6px !important;
      left: 5px !important;
      width: 16px !important;
      height: 18px !important;
      margin-top: 0px !important;
    }
    [data-filter-group="{{ section.settings.color_box_variant }}"] a.advanced-filter:hover:after {
      line-height: 18px !important;
    }
  </style>
{% endif %}
<script type="text/javascript">
  function resizeMobGrid(){
    if ($(window).width() <= 478 ) {
      category_view.changeView('grid', 2, 'btn-grid-2');
    }
  }
  {% if settings.grid_auto_resize != 'false' -%}
  // Equal height grid divs
  function resizeCollGrid(){
    var gridtype = localStorage.getItem('type');
    var gridcols = localStorage.getItem('cols');
    var gridwidth = -1;
    var contwidth = 0;

    if(gridtype == 'list') {
      gridcols = 3;
      if ($(window).width() <= 479 ) {
        gridcols = 1;
        //contwidth = -60;
      }
    }
    contwidth = contwidth + $('#custom-products').width();
    gridwidth = contwidth/gridcols - 30;
    $('#custom-products .product-layout .image img').css("height",(gridwidth/img_ratio));
  }
  {% endif %}
  $(window).on("load",function() {
    {% if settings.grid_auto_resize != 'false' -%}resizeCollGrid();{% endif %}
    resizeMobGrid();
  });
  $(window).resize(function() {
    setTimeout(function () {
      {% if settings.grid_auto_resize != 'false' -%}resizeCollGrid();{% endif %}
      resizeMobGrid();
    }, 200);
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const customProducts = document.getElementById('custom-products');
    const filterBar = document.getElementById('top_filter_bar');
    const sideFilterBar = document.getElementById('side_filter_bar');
    const sliderRange = document.getElementById('slider-range');
    const activeFilters = document.getElementById('active-filters');

    if ('{{ section.settings.show_pagination_bar }}' == 'false') {
      // Moved repeated DOM queries here
      let next_url = customProducts.dataset.nextUrl;
      const loadMoreBtn = document.querySelector('#more .button span');
      const loadMoreSpinner = document.querySelector('#more .fa-spinner');

      async function getNextPage() {
        try {
          let res = await fetch(next_url, {
            headers: {
              'Cache-Control': 'no-cache',
            },
          });
          return await res.text();
        } catch (error) {
          console.error(error); // Perhaps handle this more gracefully
        }
      }

      async function loadMoreProducts() {
        loadMoreBtn.classList.add('hidden');
        loadMoreSpinner.classList.remove('hidden');
        const nextPage = await getNextPage();

        const parser = new DOMParser();
        const nextPageDoc = parser.parseFromString(nextPage, 'text/html');

        const productGrid = nextPageDoc.getElementById('custom-products');
        const newUrl = productGrid.dataset.nextUrl;
        filterCollParam(next_url, false);
        customProducts.dataset.nextUrl = newUrl;
        next_url = newUrl;
        if (newUrl) {
          setTimeout(function () {
            loadMoreBtn.classList.remove('hidden');
            loadMoreSpinner.classList.add('hidden');
          }, 500);
        } else {
          setTimeout(function () {
            loadMoreBtn.classList.add('hidden'); // Consider if you want to hide or disable the button
            loadMoreSpinner.classList.add('hidden');
          }, 500);
        }
      }
      window.loadMoreProducts = loadMoreProducts;
    }

    document.body.addEventListener('change', function (event) {
      const target = event.target;

      // For filterBar and sideFilterBar
      if (target.matches('input[type=checkbox],input[type=radio]')) {
        event.preventDefault();
        const url = target.checked ? target.getAttribute('url_to_add') : target.getAttribute('url_to_remove');
        filterCollParam(url);
      }
    });

    document.body.addEventListener('click', function (event) {
      const target = event.target;

      // For activeFilters
      if (
        target.matches('.top_popular_tags .tag_item') ||
        target.matches('.top_popular_tags .tag_item span') ||
        target.matches('.top_popular_tags .allclear_btn')
      ) {
        event.preventDefault();
        let url = target.getAttribute('href');
        filterCollParam(url);
      }
      // Check if the target is one of the .filter-attribute-container a elements
      if (target.matches('.filter-attribute-container a.advanced-filter.a-filter.add-filter')) {
        event.preventDefault();
        let url = target.getAttribute('href');
        filterCollParam(url);
      }
      if ('{{ section.settings.show_pagination_bar }}' == 'false') {
        // Check if the clicked element is the #more element
        if (target.matches('#more a span')) {
          loadMoreProducts(event);
        }
      }
    });

    function debounce(func, wait, immediate) {
      let timeout;
      return function () {
        const context = this,
          args = arguments;
        const later = function () {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    }

    function initSlider() {
      if (document.getElementById('slider-range')) {
        const sliderRange = document.getElementById('slider-range');
        const amount = document.querySelector('#slider-data');
        const minVal = Number(amount.dataset.minn);
        const maxVal = Number(amount.dataset.maxx);
        const maxRange = Number(amount.getAttribute('max'));
        const sliderCurrency = amount.dataset.currency;

        // add nouislider script
        noUiSlider.create(sliderRange, {
          start: [minVal, maxVal],
          connect: true,
          tooltips: true,
          range: {
            min: 0,
            max: maxRange,
          },
        });

        sliderRange.noUiSlider.on('change', function (values, handle) {
          // handle 0 is the left handle, handle 1 is the right handle
          const leftValue = values[0];
          const rightValue = values[1];
          // do something with the values
          const url = document.URL;
          const hasParams = url.indexOf('?') > -1;
          let updatedUrl = '';
          if (hasParams) {
            updatedUrl = replaceUrlParam(url, 'filter.v.price.lte', rightValue);
            updatedUrl = replaceUrlParam(updatedUrl, 'filter.v.price.gte', leftValue);
          } else {
            updatedUrl = `${url}?filter.v.price.lte=${rightValue}&filter.v.price.gte=${leftValue}`;
          }
          filterCollParam(updatedUrl);
        });
      }
    }

    window.initSlider = initSlider;

    initSlider();
  });
</script>
